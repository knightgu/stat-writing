[["index.html", "Statistical Writing Chapter 1 Prerequisites", " Statistical Writing Jun Yan 2022-09-26 Chapter 1 Prerequisites This book aims to train students in statistics and data science on statistical writing with professional tools such as LaTeX, BibTeX, R, and Git. It is based on my writing experience of over 20 years and 100 scholarly papers. Many of the tips have been taught to my Ph.D. students again and again. I hope this book saves me from that repetitive efforts. The notes are prepared with the bookdown R package (Xie 2016), which can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.name/tinytex/. References "],["intro.html", "Chapter 2 Introduction 2.1 Applied papers 2.2 Methods papers", " Chapter 2 Introduction What does a statistical paper looks like? As all scientific papers, it should have some commonly expected structures which include components such as title, abstract, keywords, introduction, methods, results, discussion, acknowledgements, references, appendix, and supplement. Due to the specificity of the statistical discipline and application areas, however, statistical papers could look quite different one from another. There are different types of statistical papers. A theory paper would look similar to a paper in mathematics, with statement of the problem, presentation of some theorems, and technical proofs. Such papers are not covered by here. We focus on two types of statistical papers: application papers and method papers. Application papers focus on a specific application problem in a certain domain where the research discoveries depend on applications of existing or novel statistical methods. Method papers, on the other hand, aim to provide a general methodological solution to a class of applied problems. Often times, methods paper have a theoretical component, for example, the establishment of the asymptotic properties of a new estimator. An applied paper in statistics could be a method paper in the domain of the problem it solves. An author should always keep the target audience in mind when writing. There are many statistical journals on the wide spectrum for applied to theoretical papers. Each one has its own aims and scope, with different target readerships. Writings such as customary statistical reports that are not intended for journal publications also have target readerships. Regardless of the audience, any scientific paper should be convincing and concise. You need to show the readers that your work is important, valid, and useful. You don’t want to waste the time of any readers. 2.1 Applied papers An applied paper has a widely accepted structure: Introduction Data description Methods Results Discussion An applied paper can be applying existing statistical methods to solve an applied problem. See, for example, Price and Yan (2021); Caplan et al. (2019). When sensitivity analysis is desired for the applications, one can have a section on simulation studies. See, for example, J. Jiao et al. (2022); Li et al. (2021). Some applied papers can involve novel methodology development that is motivated by an applied problem. In such cases, simulation studies become necessary, where you validate your methods with simulated data so you can check your estimator with the truth. Such check is not feasible when analyzing real data. See, for example, Jieying Jiao, Hu, and Yan (2021); Hu et al. (2021). 2.2 Methods papers A methods paper focuses on a novel method that is applicable to a general class of problems arising in different domains. A commonly seen structure is: Introduction Methods (e.g., estimation, hypothesis tests, diagnosis) Properties Simulations Illustrations (with real applications) Discussion/Conclusions. The simulations section is often needed for methods papers. Any method has assumptions. Any reasonably good method should work as expected when the assumptions hold. It would be even better if it remains working when some of the assumptions are violated. Simulation studies can be designed to check whether the proposed estimators are unbiased and more efficient than competing estimators; whether the proposed tests retains their sizes and are more powerful than competing tests. Here are some examples: Li et al. (2022+); Lau and Yan (2022). References "],["using-the-right-tools-for-writing.html", "Chapter 3 Using the Right Tools for Writing 3.1 Git for Version Control 3.2 LaTeX for Typesetting 3.3 Using R Markdown as a Frontend", " Chapter 3 Using the Right Tools for Writing Many people use MS Word when it comes to writing. Not withholding the importance of the invention of MS Office, it is not the right tool to write statistical papers. Writing a statistical paper using MS Word would be as interesting as running a statistical data analysis using MS Excel. Simply put, MS Office is great for office staff to do routine office documentary tasks. For professional writing, one need to be aware of the professional tools and invest time to master them. The right, high-quality, professional typesetting system is LaTeX. It separates the appearance of a document from its content. There are many different professionally looking appearances one can choose or design. Authors can focus on getting the content right. The document has .tex extension, and can be edited by your favorite editor. The final output of the document can have different formats, the most popular of which is pdf, which stands for portable document format. It can be opened on any platform (computer operating system). The source .tex file is a plain text file. Just like source code of any programming language, a plain text file allows version control, which makes tracking and managing the source easy and professional. The most popular version control tool today is git. 3.1 Git for Version Control Many tutorials are available in different formats. Here is a YouTube video ``Git and GitHub for Beginners — Crash Course’’ The video also covers GitHub, a cloud service for Git. Other similar services are, for example, bitbucket, GitLab. A cloud service gives you a cloud back up of your work and makes collaboration with co-workers easy. Here is a collection of online Git exersices that I used for Git training in other courses that I taught. Tips on using Git: Use the command line interface instead of the web interface (e.g., upload on GitHub) Make frequent small commits instead of rare large commits. Make commit messages informative and meaningful. Name your files/folders by some reasonable convention. Lower cases are better than upper cases. No blanks in file/folder names. Keep the repo clean by not tracking generated files. Creat a .gitignore file for better output from git status. Keep the linewidth of sources to under 80 for better git diff view. 3.2 LaTeX for Typesetting Use Anthony Zeimbekakis’ thesis as a template. A LaTeX source file has extension name .tex. It is a plain text file that can be edited by any text editor. It can be tracked easily for differences between any two versions. Different document classes are predefined such as letter, article, report, and book. Customized document classes can be defined once you know more about . We focus on article here. The instructions in this section are practiced in a demo repo. 3.2.1 A beginner’s template For the product to look like a paper, we need to have title, author, abstract, sections, and references. Let us start from a very basic template. Tips on getting started with LaTeX. Read the compiling log and fix the errors/warnings. Google the error/warning messages usually helps. Keep the preamble minimally necessary. Set up geometry with the geometry package. No manually controlling spaces. Read the LaTeX symbol tables frequently. Keep line widths under 80 characters. Separate paragraphs by double blank likes. 3.2.2 Math equations For serious math typesetting, use packages amsmath, amsthm, and others. Tips on using math: Add spaces between symbols for better readability in sources. No fractions (\\frac) inline math. No breaking inline maths into different lines in tex sources. No labeling equations that are not referenced to. Keep fonts consistent for the same notations (e.g., \\(n\\) not n; AIC not \\(AIC\\)). Use appropriate sizes for parenthesis. Use predefined math functions (e.g, \\(\\exp\\) not \\(exp\\); \\(\\Pr\\) not \\(P\\)). Use \\allowdisplaybreak to allow page breaks in aligned equations. Referencing with \\eqref instead of (\\ref). Use \\dd for differentiation orperator (available from package physics). Punctuate equations as they always are part of sentences. No breaking long equations arbitrarily in tex source; use short lines and add sufficient spaces to make the sources more readable. Align at appropriate places in multiline equations. 3.2.3 Tables If you are manually typing a LaTeX table source, think if you can generate the source. There are multiple R packages that can generate the tex source from a given dataset. See package xtable for example. Tips on professional LaTeX tables: Use tbp for floating locations; avoid h. Make it self-contained with an informative caption. Avoid vertical lines. Put negative signs in math mode. Use better top, middle, and bottom rules from package booktabs. Allow hierarchy by cmidrule(). Do not change font size for tables. Change table layout to fit instead of re-sizing it. Right adjust numbers with decimal places. See Small Guide to Making Nice Tables by Markus P\"u{}schel 3.2.4 Figures Use vector graphs, not raster graphs (unless you have to, e.g., screenshots). Save the code that generates the figures so the figures can be improved easily. Tipis on LaTeX figures: Use tbp for floating locations; avoid h. Use latex package graphicx. For line plots with different groups, use different line pattern to distinguish them, not only color, so that readers can tell the difference when printing them out. Same for different dots on plots. Use colorblind friendly colors (especially avoid red/green) Keep the right aspect ratio when necessary (e.g., basketball court; map; pp-plot). Remove extra margins. Keep the ratio when resizing (e.g., width = \\textwidth) Name the figure files appropriately. 3.2.5 References Combination of BibTeX and LaTeX to generate the reference list. Non-referenced references are not to be cited. All referenced references are to be listed. The nice feature is made possible by the package natbib. We need to collect references in BibTeX format and same them in a bib database (.bib) file. The display styles of the references are controlled by bib style (.bst) files. Many journals have their own bib style files for downloading. One can construct a customized bib style easily with the help of custom-bib. In general, to compile a tex file with bibtex references into a pdf document, one needs to run pdflatex first, then bibtex, and then pdflatex twice to get the references correct. A simpler solution is latexmk -pdf. In my practice, I always have a Makefile and use make to smartly automate the compiling process. See, for example, Anthony’s thesis repo. Tips on preparing BibTeX databases: Devise a good naming convention for references keys and stick to it. Keep the bib database sorted and formatted tidy. (No repeated entries.) Title: Capitalize initials of notional words (not form words). Use Google Scholar to get the bibtex source of a reference, but be sure to quality control the google output for missing fields and errors. Protect capitalization of words with special meanings in curly braces. (e.g., {B}ayesian, {M}arkov Chain {M}onte {C}arlo) Protect captilization of initial words after a colon in titles. Book needs to have publisher and address fields. For preprints, always check if they have been published recently. Use the note field to show information that should always be shown, Double hyphen between pages numbers. All references without page numbers or volume number should be checked. 3.2.6 Cross-referencing Define a label for each object and refer to it by its label. Tips on cross-referencing: Devise a good naming convention for labels and stick to it. Use different labels for different types of objects (e.g, eq: for equations sec: for sections, tab: for tables, fig: for figures, alg: for algorithms, etc.) Watch warnings from compiling logs for undefined labels or multiply defined labels and fix them. Use package xr for cross-document referencing. 3.3 Using R Markdown as a Frontend Here is a template from the UConn Data Science Lab. "],["references-1.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
